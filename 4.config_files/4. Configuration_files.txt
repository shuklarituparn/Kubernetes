kubectl create deployment deployment-name image option1 option2  


//image is the image it is based on 

//option1 option2 are the options we give it

//this is saved in the configuration file and the file is executed as

kubectl apply -f config_file.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment  //name of the deployment
  labels:
    app: nginx
spec:                   //specification for the deployment
  replicas: 1  //how many replicas to create 
  selector:
   matchLabels: 
     app: nginx
  template:  //template and spec is the blueprints for the deployment
    metadata:
      labels:
        app: nginx
    spec:          //specification for the pods
      containers:
        -name: nginx
         image: nginx:1.16
         ports:
           -containerPort: 80


           Key points to note:

Ensure that there is proper spacing before the field names and values.
Indentation should use spaces (typically two spaces) consistently.
Use colons (:) to separate field names and values.
Lists (like containers and ports) should be indented properly with a - before each list item.
Make sure there are no extra spaces or tabs that could break the YAML structure.

With these corrections, your YAML file should be valid, and you should be able to apply it using kubectl apply -f nginx_config.yaml without encountering any parsing errors.
~
kubectl apply -f config_file.yaml  //typing it again will make kubectl to update the configuration file


kubectl -delete -f filename

Each configuration file has 3 part

1. Metadata which has the name
2. specification: which we specify as a service or deployment (Attribute specific to the kind of service we create)

3. Status: Desired != actual then kubernetes knows that something needs to be fixed 

k8s update the state continiously

k8s get the status from etcd which holds the current status of any kubernetes components


YAML: Human friendly data serialization service for the programming language

syntax:strict indentations 


Can use YAMLonline validator to fix the error in the indentations 


- ITS NECESSARY AND DESIRED TO STORE THE CONFIG FILE WITH THE connected

Template also has its metadata and spec sections

The configuration inside the template applies to the pod

It has a blueprints for a pod, like name, image and the port on which it'll open



CONNECTING PODS:


LABELS, SELECTORS AND PODS:  

Metadata part contains the labels

and the specification part contains the SELECTORS

Metadata you give the key value pairs 

labels: 
  app:nginx


The label is then matched by the selector 

selector:
  matchlabels:
  app: nginx

deployment has its own label

app:nginx

these two labels are used by the service selectors

service should know which pods are registered to it, which pods are connected to it, and it gets to know it by selectors


PORTS::::::::::::


The service has its own port where the service is accessible at 

when other service needs to send request to NGINX port it needs to send at port 80

Service should know which pod it should forward the request to and to which port


kubectl describe serive service-name 

using it we can get the endpoints on which the service is defined
