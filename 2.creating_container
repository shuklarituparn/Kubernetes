to create a new contair or a new pod, we use the following command

kubectl create deployment name-depl --image=imagename

name-depl is the name of the deployment and --image=image is the image name 

it has all the blueprints for creating the pods, name and the image 

between the deployment there's a layer managed by the kubernetes which is the replica set 

kubectl get replicaset //it is managing the replica of the pod

mongo-depl-79585f75cf   //name of the deployment and the replicaset




//////////////////////Layer of Abstraction ////////////////////////////////////

1. Deployment manages a replica set
2. A replicaset manages replicas of the pods
3. A pod is an Abstraction of a container
4. Container


EVERYTHING BELOW DEPLOYMENT IS MANAGED BY KUBERNETES  


To edit the image in the deployment directory and not the pod


kubectl edit deployment name-name

# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#
# deployments.apps "nginx-depl" was not valid:
# * <nil>: Invalid value: "The edited file failed validation": yaml: line 33: did not find expected '-' indicator
#
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: "2023-09-15T16:26:51Z"
  generation: 1
  labels:
    app: nginx-depl
  name: nginx-depl
  namespace: default
  resourceVersion: "3709"
  uid: c5d1e84a-a515-42a9-8317-75b5bf017bec
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: nginx-depl
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx-depl
    spec:
      containers:
        - image: nginx:1.16
        imagePullPolicy: Always
        name: nginx
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2023-09-15T16:27:11Z"
    lastUpdateTime: "2023-09-15T16:27:11Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2023-09-15T16:26:51Z"
    lastUpdateTime: "2023-09-15T16:27:11Z"
    message: ReplicaSet "nginx-depl-6b7698588c" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 1
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1


  When we edit be careful of the indentations, I messed up the indentations on the image name and it was not getting saved

nginx-depl-c8ddc48bf-c7sjr  //after editing we can see the new pod with the updated deployment